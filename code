// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

/**
 * @title HFV Staking Contract - Multi Duration
 * @notice Supports 4 lock periods: 21 days, 3 months, 6 months, 12 months
 * Reward = amount × 0.4 × 17.38 × duration_multiplier
 */
contract HFVStaking is Ownable {
    IERC20 public immutable hfvToken;

    address public constant mfAddress = 0x9caAfb42977C70f5496174930fe2AD1e8436cd22;
    address public constant psfAddress = 0x74b6E88C895f7398304A04508D91f8f48ce11768;

    enum Duration { D21, D90, D180, D365 }

    struct Stake {
        uint256 amount;
        uint256 startTime;
        Duration lockPeriod;
        bool claimed;
    }

    mapping(address => Stake[]) public stakes;

    uint256 public constant PRECISION = 1e4;
    uint256 public constant BASE_REWARD = 6950; // Represents 695% APY over 365 days

    constructor(address _token) Ownable(msg.sender) {
        require(_token != address(0), "Invalid token address");
        hfvToken = IERC20(_token);
    }

    function stake(uint256 amount, Duration lockPeriod) external {
        require(amount > 0, "Amount must be > 0");
        hfvToken.transferFrom(msg.sender, address(this), amount);

        stakes[msg.sender].push(Stake({
            amount: amount,
            startTime: block.timestamp,
            lockPeriod: lockPeriod,
            claimed: false
        }));
    }

    function claim(uint256 index) external {
        require(index < stakes[msg.sender].length, "Invalid index");

        Stake storage s = stakes[msg.sender][index];
        require(!s.claimed, "Already claimed");
        require(block.timestamp >= s.startTime + getLockTime(s.lockPeriod), "Stake still locked");

        uint256 reward = calculateReward(s.amount, s.lockPeriod);
        s.claimed = true;

        uint256 mfBalance = hfvToken.balanceOf(mfAddress);
        uint256 psfBalance = hfvToken.balanceOf(psfAddress);

        if (mfBalance < reward && psfBalance >= reward - mfBalance) {
            require(
                hfvToken.transferFrom(psfAddress, mfAddress, reward - mfBalance),
                "Top-up from PSF failed"
            );
        }

        require(hfvToken.balanceOf(mfAddress) >= reward, "Insufficient MF balance");
        require(hfvToken.transferFrom(mfAddress, msg.sender, reward), "Reward transfer failed");
    }

    function getLockTime(Duration d) public pure returns (uint256) {
        if (d == Duration.D21) return 21 days;
        if (d == Duration.D90) return 90 days;
        if (d == Duration.D180) return 180 days;
        if (d == Duration.D365) return 365 days;
        return 0;
    }

    function calculateReward(uint256 amount, Duration d) public pure returns (uint256) {
        uint256 multiplier;
        if (d == Duration.D21) multiplier = 1;
        else if (d == Duration.D90) multiplier = 4;
        else if (d == Duration.D180) multiplier = 8;
        else if (d == Duration.D365) multiplier = 17;

        // 40% * 17.38 = 695% → base reward per 365 days
        // Multiply that based on tier
        return (amount * BASE_REWARD * multiplier) / (17 * PRECISION);
    }

    function getUserStakes(address user) external view returns (Stake[] memory) {
        return stakes[user];
    }
}

